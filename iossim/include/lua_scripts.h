/* THIS FILE IS GENERATED BY ./gen_lua_scripts_h.sh */
static const char *lt_script_ltanimator = 
"-- ltanimator.lua\n"
"local\n"
"function animator_advance(animator, dt)\n"
"    for i = 1, animator.num_threads do\n"
"        local thread = animator.threads[i]\n"
"        if thread then\n"
"            local accum = animator.accums[i]\n"
"            local done = false\n"
"            accum = accum - dt\n"
"            while accum < 0 and not done do\n"
"                local t = thread(animator.tweens)\n"
"                log(tostring(t))\n"
"                if not t then\n"
"                    done = true\n"
"                    animator.threads[i] = nil\n"
"                else\n"
"                    accum = accum + t\n"
"                end\n"
"            end\n"
"            animator.accums[i] = accum\n"
"        end\n"
"    end\n"
"    animator.tweens:Advance(dt)\n"
"end\n"
"\n"
"local lt_add_tween = lt.AddTween\n"
"\n"
"local\n"
"function add_tween(tweens, obj, field, val, time, easing)\n"
"    while not lt_add_tween(tweens, obj, field, val, time, easing) and obj do\n"
"        obj = obj.child\n"
"    end\n"
"    if not obj then\n"
"        error(\"Cannot tween field: \" .. field, 3)\n"
"    end\n"
"end\n"
"\n"
"function lt.AddTweens(tweens, obj, fields)\n"
"    local time = fields.time\n"
"    if not time then\n"
"        time = 1\n"
"    end\n"
"    local easing = fields.easing\n"
"    if not easing then\n"
"        easing = \"linear\"\n"
"    end\n"
"    for field, val in pairs(fields) do\n"
"        if field ~= \"time\" and field ~= \"easing\" then\n"
"            add_tween(tweens, obj, field, val, time, easing)\n"
"        end\n"
"    end\n"
"end\n"
"\n"
"function lt.Animator(...)\n"
"    local n = select(\"#\", ...)\n"
"    local tweens = lt.TweenSet()\n"
"    local threads = {}\n"
"    local accums = {}\n"
"    for i = 1, n do\n"
"        local f = select(i, ...)\n"
"        local thread = coroutine.wrap(f)\n"
"        accums[i] = thread(tweens)\n"
"        threads[i] = thread\n"
"    end\n"
"    local animator = {\n"
"        num_threads = n,\n"
"        tweens = tweens,\n"
"        threads = threads,\n"
"        accums = accums, -- amount of time to wait before resuming each thread\n"
"        Advance = animator_advance,\n"
"    }\n"
"    return animator\n"
"end\n"
"\n"
"function lt.Wait(t)\n"
"    coroutine.yield(t)\n"
"end\n"
;

static const char *lt_script_ltgraphics = 
"-- ltgraphics.lua\n"
"function lt.DoInNewMatrix(f)\n"
"    lt.PushMatrix()\n"
"    f()\n"
"    lt.PopMatrix()\n"
"end\n"
;

static const char *lt_script_lthierachy = 
"-- lthierachy.lua\n"
"local descendents = {}\n"
"for name, mt in pairs(lt_metatables) do\n"
"    for ancestor, _ in pairs(mt.is) do\n"
"        local ds = descendents[ancestor]\n"
"        if not ds then\n"
"            ds = {}\n"
"            descendents[ancestor] = ds\n"
"        end\n"
"        ds[name] = mt\n"
"    end\n"
"end\n"
"\n"
"local\n"
"function mt_add(name, field, val)\n"
"    for desc, mt in pairs(descendents[name]) do\n"
"        mt[field] = val\n"
"    end\n"
"end\n"
"\n"
"mt_add(\"lt.SceneNode\", \"Tween\", lt.Tween)\n"
"mt_add(\"lt.SceneNode\", \"CancelTween\", lt.CancelTween)\n"
"mt_add(\"lt.SceneNode\", \"Draw\", lt.DrawSceneNode)\n"
"mt_add(\"lt.SceneNode\", \"Tint\", lt.Tint)\n"
"mt_add(\"lt.SceneNode\", \"BlendMode\", lt.BlendMode)\n"
"mt_add(\"lt.SceneNode\", \"TextureMode\", lt.TextureMode)\n"
"mt_add(\"lt.SceneNode\", \"Translate\", lt.Translate)\n"
"mt_add(\"lt.SceneNode\", \"Rotate\", lt.Rotate)\n"
"mt_add(\"lt.SceneNode\", \"Scale\", lt.Scale)\n"
"mt_add(\"lt.SceneNode\", \"Shear\", lt.Shear)\n"
"mt_add(\"lt.SceneNode\", \"Transform\", lt.Transform)\n"
"mt_add(\"lt.SceneNode\", \"Perspective\", lt.Perspective)\n"
"mt_add(\"lt.SceneNode\", \"Pitch\", lt.Pitch)\n"
"mt_add(\"lt.SceneNode\", \"HitFilter\", lt.HitFilter)\n"
"mt_add(\"lt.SceneNode\", \"DownFilter\", lt.DownFilter)\n"
"mt_add(\"lt.SceneNode\", \"HitBarrier\", lt.HitBarrier)\n"
"mt_add(\"lt.SceneNode\", \"Wrap\", lt.Wrap)\n"
"mt_add(\"lt.SceneNode\", \"TrackBody\", lt.BodyTracker)\n"
"mt_add(\"lt.SceneNode\", \"Button\", lt.Button)\n"
"mt_add(\"lt.SceneNode\", \"Fog\", lt.Fog)\n"
"mt_add(\"lt.SceneNode\", \"DepthTest\", lt.DepthTest)\n"
"mt_add(\"lt.SceneNode\", \"DepthMask\", lt.DepthMask)\n"
"mt_add(\"lt.SceneNode\", \"ContainsPoint\", lt.SceneNodeContainsPoint)\n"
"mt_add(\"lt.SceneNode\", \"Action\", lt.AddAction)\n"
"mt_add(\"lt.SceneNode\", \"Lighting\", lt.Lighting)\n"
"mt_add(\"lt.SceneNode\", \"Light\", lt.Light)\n"
"mt_add(\"lt.SceneNode\", \"Material\", lt.Material)\n"
"mt_add(\"lt.SceneNode\", \"CullFace\", lt.CullFace)\n"
"mt_add(\"lt.SceneNode\", \"Hidden\", lt.Hidden)\n"
"mt_add(\"lt.SceneNode\", \"RenderTarget\", lt.RenderTarget)\n"
"\n"
"mt_add(\"lt.SceneNode\", \"Event\", lt.AddEventHandler)\n"
"mt_add(\"lt.SceneNode\", \"Mouse\", lt.AddMouseHandler)\n"
"mt_add(\"lt.SceneNode\", \"MouseDown\", lt.AddMouseDownHandler)\n"
"mt_add(\"lt.SceneNode\", \"MouseUp\", lt.AddMouseUpHandler)\n"
"mt_add(\"lt.SceneNode\", \"MouseMove\", lt.AddMouseMoveHandler)\n"
"mt_add(\"lt.SceneNode\", \"MouseEnter\", lt.AddMouseEnterHandler)\n"
"mt_add(\"lt.SceneNode\", \"MouseExit\", lt.AddMouseExitHandler)\n"
"mt_add(\"lt.SceneNode\", \"Touch\", lt.AddTouchHandler)\n"
"mt_add(\"lt.SceneNode\", \"TouchDown\", lt.AddTouchDownHandler)\n"
"mt_add(\"lt.SceneNode\", \"TouchUp\", lt.AddTouchUpHandler)\n"
"mt_add(\"lt.SceneNode\", \"TouchMove\", lt.AddTouchMoveHandler)\n"
"mt_add(\"lt.SceneNode\", \"TouchEnter\", lt.AddTouchEnterHandler)\n"
"mt_add(\"lt.SceneNode\", \"TouchExit\", lt.AddTouchExitHandler)\n"
"mt_add(\"lt.SceneNode\", \"Pointer\", lt.AddPointerHandler)\n"
"mt_add(\"lt.SceneNode\", \"PointerDown\", lt.AddPointerDownHandler)\n"
"mt_add(\"lt.SceneNode\", \"PointerUp\", lt.AddPointerUpHandler)\n"
"mt_add(\"lt.SceneNode\", \"PointerMove\", lt.AddPointerMoveHandler)\n"
"mt_add(\"lt.SceneNode\", \"PointerEnter\", lt.AddPointerEnterHandler)\n"
"mt_add(\"lt.SceneNode\", \"PointerExit\", lt.AddPointerExitHandler)\n"
"mt_add(\"lt.SceneNode\", \"Key\", lt.AddKeyHandler)\n"
"mt_add(\"lt.SceneNode\", \"KeyDown\", lt.AddKeyDownHandler)\n"
"mt_add(\"lt.SceneNode\", \"KeyUp\", lt.AddKeyUpHandler)\n"
"mt_add(\"lt.SceneNode\", \"PropagateEvent\", lt.PropagateEvent)\n"
"mt_add(\"lt.SceneNode\", \"Exclusive\", lt.MakeSceneNodeExclusive)\n"
"\n"
"mt_add(\"lt.Layer\", \"Insert\", lt.InsertLayerFront)\n"
"mt_add(\"lt.Layer\", \"InsertBack\", lt.InsertLayerBack)\n"
"mt_add(\"lt.Layer\", \"InsertAbove\", lt.InsertLayerAbove)\n"
"mt_add(\"lt.Layer\", \"InsertBelow\", lt.InsertLayerBelow)\n"
"mt_add(\"lt.Layer\", \"Remove\", lt.RemoveFromLayer)\n"
"mt_add(\"lt.Layer\", \"Size\", lt.LayerSize)\n"
"\n"
"mt_add(\"lt.VectorImpl\", \"GenerateColumn\", lt.GenerateVectorColumn)\n"
"mt_add(\"lt.VectorImpl\", \"FillWithImage\", lt.FillVectorColumnsWithImageQuads)\n"
"\n"
"--lt.TweenSet_mt.Advance = lt.AdvanceTweens\n"
"--lt.TweenSet_mt.Add = lt.AddTweens\n"
"--lt.TweenSet_mt.Clear = lt.ClearTweens\n"
"\n"
"mt_add(\"lt.Sample\", \"Play\", lt.PlaySampleOnce)\n"
"mt_add(\"lt.Sample\", \"Length\", lt.SampleLength)\n"
"\n"
"mt_add(\"lt.Track\", \"Play\", lt.PlayTrack)\n"
"mt_add(\"lt.Track\", \"Pause\", lt.PauseTrack)\n"
"mt_add(\"lt.Track\", \"Stop\", lt.StopTrack)\n"
"mt_add(\"lt.Track\", \"Rewind\", lt.RewindTrack)\n"
"mt_add(\"lt.Track\", \"Queue\", lt.QueueSampleInTrack)\n"
"mt_add(\"lt.Track\", \"SetLoop\", lt.SetTrackLoop)\n"
"mt_add(\"lt.Track\", \"NumQueued\", lt.TrackQueueSize)\n"
"mt_add(\"lt.Track\", \"NumPending\", lt.TrackNumPending)\n"
"mt_add(\"lt.Track\", \"NumPlayed\", lt.TrackNumPlayed)\n"
"mt_add(\"lt.Track\", \"Dequeue\", lt.TrackDequeuePlayed)\n"
"\n"
"--[[\n"
"lt.World_mt.Step            = lt.DoWorldStep\n"
"lt.World_mt.SetGravity      = lt.SetWorldGravity\n"
"lt.World_mt.SetAutoClearForces = lt.SetWorldAutoClearForces\n"
"lt.World_mt.QueryBox        = lt.WorldQueryBox\n"
"lt.World_mt.AddStaticBody   = lt.AddStaticBodyToWorld\n"
"lt.World_mt.AddDynamicBody  = lt.AddDynamicBodyToWorld\n"
"lt.World_mt.AddBody         = lt.AddBodyToWorld\n"
"lt.World_mt.RayCast         = lt.WorldRayCast\n"
"lt.World_mt.AddJoint        = lt.AddJointToWorld\n"
"\n"
"lt.Body_mt.Destroy             = lt.DestroyBody\n"
"lt.Body_mt.IsDestroyed         = lt.BodyIsDestroyed\n"
"lt.Body_mt.ApplyForce          = lt.ApplyForceToBody\n"
"lt.Body_mt.ApplyTorque         = lt.ApplyTorqueToBody\n"
"lt.Body_mt.ApplyImpulse        = lt.ApplyImpulseToBody\n"
"lt.Body_mt.ApplyAngularImpulse = lt.ApplyAngularImpulseToBody\n"
"lt.Body_mt.GetAngle            = lt.GetBodyAngle\n"
"lt.Body_mt.SetAngle            = lt.SetBodyAngle\n"
"lt.Body_mt.GetPosition         = lt.GetBodyPosition\n"
"lt.Body_mt.SetPosition         = lt.SetBodyPosition\n"
"lt.Body_mt.GetVelocity         = lt.GetBodyVelocity\n"
"lt.Body_mt.SetVelocity         = lt.SetBodyVelocity\n"
"lt.Body_mt.SetAngularVelocity  = lt.SetBodyAngularVelocity\n"
"lt.Body_mt.SetGravityScale     = lt.SetBodyGravityScale\n"
"lt.Body_mt.AddRect             = lt.AddRectToBody\n"
"lt.Body_mt.AddTriangle         = lt.AddTriangleToBody\n"
"lt.Body_mt.AddPoly             = lt.AddPolygonToBody\n"
"lt.Body_mt.AddCircle           = lt.AddCircleToBody\n"
"lt.Body_mt.Touching            = lt.BodyOrFixtureTouching\n"
"lt.Body_mt.Fixtures            = lt.GetBodyFixtures\n"
"\n"
"lt.Fixture_mt.ContainsPoint   = lt.FixtureContainsPoint\n"
"lt.Fixture_mt.Destroy         = lt.DestroyFixture\n"
"lt.Fixture_mt.IsDestroyed     = lt.FixtureIsDestroyed\n"
"lt.Fixture_mt.GetBody         = lt.GetFixtureBody\n"
"lt.Fixture_mt.Touching        = lt.BodyOrFixtureTouching\n"
"lt.Fixture_mt.BoundingBox     = lt.FixtureBoundingBox\n"
"]]\n"
"\n"
"mt_add(\"lt.Random\", \"Int\", lt.NextRandomInt)\n"
"mt_add(\"lt.Random\", \"Num\", lt.NextRandomNumber)\n"
"mt_add(\"lt.Random\", \"Bool\", lt.NextRandomBool)\n"
;

static const char *lt_script_ltimage = 
"-- ltimage.lua\n"
"-- empty\n"
;

static const char *lt_script_ltio = 
"-- ltio.lua\n"
"local function wrt(ind, file, x)\n"
"    local t = type(x)\n"
"    local spaces = string.rep(\"  \", ind + 1)\n"
"    if t == \"table\" then\n"
"        file:write(\"{\\n\")\n"
"        for key, val in pairs(x) do\n"
"            if type(key) == \"string\" then\n"
"                file:write(spaces, key, \" = \")\n"
"            else\n"
"                file:write(spaces, \"[\", tostring(key), \"] = \")\n"
"            end\n"
"            wrt(ind + 1, file, val)\n"
"            file:write(\",\\n\")\n"
"        end\n"
"        file:write(string.rep(\"  \", ind), \"}\")\n"
"    elseif t == \"string\" then\n"
"        file:write(\"[[\", x, \"]]\")\n"
"    else\n"
"        file:write(tostring(x))\n"
"    end \n"
"end\n"
"\n"
"function lt.Write(file, x)\n"
"    wrt(0, file, x)\n"
"    file:write(\"\\n\")\n"
"end\n"
"\n"
"function lt.Save(filename, val)\n"
"    local file = io.open(filename, \"w\")\n"
"    file:write(\"return \")\n"
"    lt.Write(file, val)\n"
"    file:close()\n"
"end\n"
"\n"
"function lt.Load(filename)\n"
"    local chunk = loadfile(filename)\n"
"    if chunk then\n"
"        return chunk()\n"
"    else\n"
"        error(\"Unable to load \" .. filename)\n"
"    end\n"
"end\n"
;

static const char *lt_script_ltmath = 
"-- ltmath.lua\n"
"lt.frames_per_sec = 60\n"
"lt.secs_per_frame = 1 / lt.frames_per_sec\n"
"lt.radians_per_degree = math.pi / 180\n"
"lt.degrees_per_radian = 180 / math.pi\n"
"\n"
"local sin_func = math.sin\n"
"local cos_func = math.cos\n"
"local tan_func = math.tan\n"
"local rads_per_deg = lt.radians_per_degree\n"
"local degs_per_rad = lt.degrees_per_radian\n"
"\n"
"-- Trigonometric functions that take degrees.\n"
"function sin(x)\n"
"    return sin_func(x * rads_per_deg)\n"
"end\n"
"function tan(x)\n"
"    return tan_func(x * rads_per_deg)\n"
"end\n"
"function cos(x)\n"
"    return cos_func(x * rads_per_deg)\n"
"end\n"
;

static const char *lt_script_ltrefs = 
"-- ltrefs.lua\n"
"-- Global weak references registry.\n"
"lt.wrefs = {}\n"
"setmetatable(lt.wrefs, {__mode = \"kv\"})\n"
;

static const char *lt_script_ltscene = 
"-- ltscene.lua\n"
"lt.root = lt.Wrap(nil)\n"
"lt.root:Activate()\n"
"\n"
"function lt.Render()\n"
"    lt.root:Draw()\n"
"end\n"
"\n"
"function lt.Advance(dt)\n"
"    lt.ExecuteActions(dt)\n"
"end\n"
"\n"
"function lt.HandleEvent(event)\n"
"    lt.root:PropagateEvent(event)\n"
"end\n"
;

static const char *lt_script_ltsprite = 
"-- ltsprite.lua\n"
"local sprites_mt = {__mode = \"v\"}\n"
"\n"
"-------------------------------------------------------------\n"
"\n"
"function lt.SpriteSet()\n"
"    local sprites = {}\n"
"    setmetatable(sprites, sprites_mt)\n"
"    return sprites\n"
"end\n"
"\n"
"local global_sprites = lt.SpriteSet()\n"
"\n"
"local\n"
"function sprite_reset(sprite)\n"
"    sprite.child = sprite.frames[1]\n"
"    sprite.t_accum = 0\n"
"    sprite.curr_frame = 1\n"
"end\n"
"\n"
"-- frames is an array of images.\n"
"function lt.Sprite(frames, fps, spriteset)\n"
"    if not spriteset then\n"
"        spriteset = global_sprites\n"
"    end\n"
"    local n = #spriteset\n"
"    local sprite = lt.Wrap(frames[1])\n"
"    sprite.frames = frames\n"
"    sprite.spf = 1 / fps -- secs per frame\n"
"    sprite.t_accum = 0\n"
"    sprite.curr_frame = 1\n"
"    sprite.paused = false\n"
"    sprite.loop = true\n"
"    sprite.Reset = sprite_reset\n"
"    spriteset[n + 1] = sprite\n"
"    return sprite\n"
"end\n"
"\n"
"function lt.AdvanceSprites(spriteset, step)\n"
"    local t_accum\n"
"    local spf -- secs per frame\n"
"    local num_frames\n"
"    local frames\n"
"    local curr_frame\n"
"    local prev_frame\n"
"    for _, sprite in pairs(spriteset) do\n"
"        if not sprite.paused then\n"
"            spf = sprite.spf\n"
"            t_accum = sprite.t_accum + step\n"
"            frames = sprite.frames\n"
"            num_frames = #frames\n"
"            curr_frame = sprite.curr_frame\n"
"            prev_frame = curr_frame\n"
"            while t_accum >= spf do\n"
"                t_accum = t_accum - spf\n"
"                curr_frame = curr_frame + 1\n"
"                if curr_frame > num_frames then\n"
"                    if sprite.loop then\n"
"                        curr_frame = type(sprite.loop) == \"number\" and sprite.loop or 1\n"
"                    else\n"
"                        curr_frame = num_frames\n"
"                    end\n"
"                end\n"
"            end\n"
"            sprite.t_accum = t_accum\n"
"            if prev_frame ~= curr_frame then\n"
"                sprite.curr_frame = curr_frame\n"
"                sprite.child = frames[curr_frame]\n"
"            end\n"
"        end\n"
"    end\n"
"end\n"
"\n"
"function lt.AdvanceGlobalSprites(dt)\n"
"    lt.AdvanceSprites(global_sprites, dt or lt.secs_per_frame)\n"
"end\n"
"\n"
"function lt.ClearGlobalSprites()\n"
"    global_sprites = lt.SpriteSet()\n"
"end\n"
;

static const char *lt_script_lttext = 
"-- lttext.lua\n"
"function lt.Text(str, font, halign, valign)\n"
"    halign = halign or \"left\"\n"
"    valign = valign or \"center\"\n"
"\n"
"    local em = font.m or font.M or font[\"0\"] or {width = 0.1, height = 0.1}\n"
"    local space = em.width * (font.space or 0.3)\n"
"    local hmove = em.width * (font.hmove or 0.05)\n"
"    local vmove = em.height * (font.vmove or 1.2)\n"
"    local kerntable = font.kern\n"
"    local fixed_w = font.fixed and em.width\n"
"    local x, y, dx, k, gap = 0, -em.height / 2, 0, 0, 0\n"
"    local line = lt.Layer()\n"
"    local scale = 1\n"
"\n"
"    -- Build an array of lines.\n"
"    local lines = {line}\n"
"    local i = 1\n"
"    local len = str:len()\n"
"    while i <= len do\n"
"        local chr = str:sub(i, i)\n"
"        local kernpair = kerntable and str:sub(i, i + 1)\n"
"        if chr == \"\\n\" then\n"
"            line.width = x - gap\n"
"            line = lt.Layer()\n"
"            table.insert(lines, line)\n"
"            y = y - vmove\n"
"            x = 0\n"
"        elseif chr == \"\\\\\" then\n"
"            i = i + 1\n"
"            chr = str:sub(i, i)\n"
"            if chr == \"+\" then\n"
"                scale = scale + 0.1\n"
"            elseif chr == \"-\" then\n"
"                scale = scale - 0.1\n"
"            end\n"
"        else\n"
"            local img = font[chr] or font[string.upper(chr)] or font[string.lower(chr)]\n"
"            if not img then\n"
"                dx = space\n"
"                gap = space\n"
"            else\n"
"                local w = fixed_w or img.width\n"
"                local node = img\n"
"                if scale ~= 1 then\n"
"                    node = node:Scale(scale)\n"
"                end\n"
"                line:Insert(node:Translate(x + w/2, y))\n"
"                k = kerntable and kerntable[kernpair]\n"
"                gap = (k and k * em.width or hmove)\n"
"                dx = gap + w\n"
"            end\n"
"            x = x + scale * dx\n"
"        end\n"
"        i = i + 1\n"
"    end\n"
"    line.width = x - gap\n"
"\n"
"    -- Compute text bounding box.\n"
"    local bb_width = 0;\n"
"    local bb_height = #lines * vmove - (vmove - em.height)\n"
"    local bb_top, bb_left, bb_bottom, bb_right\n"
"    for _, line in ipairs(lines) do\n"
"        if line.width > bb_width then\n"
"            bb_width = line.width\n"
"        end\n"
"    end\n"
"    if halign == \"left\" then\n"
"        bb_left = 0\n"
"        bb_right = bb_width\n"
"    elseif halign == \"right\" then\n"
"        bb_left = -bb_width\n"
"        bb_right = 0\n"
"    else -- centered\n"
"        bb_left = -bb_width / 2\n"
"        bb_right = bb_width / 2\n"
"    end\n"
"\n"
"    -- Insert lines into haligned node.\n"
"    local haligned = lt.Layer()\n"
"    for _, line in ipairs(lines) do\n"
"        if halign == \"left\" then\n"
"            haligned:Insert(line)\n"
"        elseif halign == \"right\" then\n"
"            haligned:Insert(lt.Translate(line, -line.width, 0))\n"
"        else -- centered\n"
"            haligned:Insert(lt.Translate(line, -line.width / 2, 0))\n"
"        end\n"
"    end\n"
"\n"
"    -- Create valigned node.\n"
"    local valigned\n"
"    if valign == \"top\" then\n"
"        valigned = haligned\n"
"        bb_top = 0\n"
"        bb_bottom = -bb_height\n"
"    elseif valign == \"bottom\" then\n"
"        valigned = lt.Translate(haligned, 0, bb_height)\n"
"        bb_top = bb_height\n"
"        bb_bottom = 0\n"
"    else -- centered\n"
"        valigned = lt.Translate(haligned, 0, bb_height / 2)\n"
"        bb_top = bb_height / 2\n"
"        bb_bottom = -bb_height / 2\n"
"    end\n"
"\n"
"    valigned.width = bb_width\n"
"    valigned.height = bb_height\n"
"    valigned.left = bb_left\n"
"    valigned.bottom = bb_bottom\n"
"    valigned.right = bb_right\n"
"    valigned.top = bb_top\n"
"    return valigned\n"
"end\n"
;

static const char *lt_script_lttimer = 
"-- lttimer.lua\n"
"local global_timers = {}\n"
"\n"
"local insert = table.insert\n"
"\n"
"function lt.Timer(t, func, timers)\n"
"    if timers == nil then\n"
"        timers = global_timers\n"
"    end\n"
"    insert(timers, {action = func, t = t})\n"
"end\n"
"\n"
"function lt.AdvanceTimers(dt, timers)\n"
"    for i, tmr in pairs(timers) do\n"
"        local t = tmr.t\n"
"        t = t - dt\n"
"        if t <= 0 then\n"
"            tmr.action()\n"
"            timers[i] = nil\n"
"        else\n"
"            tmr.t = t\n"
"        end\n"
"    end\n"
"end\n"
"\n"
"local ad = lt.AdvanceTimers\n"
"\n"
"function lt.AdvanceGlobalTimers(dt)\n"
"    ad(dt, global_timers)\n"
"end\n"
"\n"
"function lt.ClearGlobalTimers()\n"
"    global_timers = {}\n"
"end\n"
;

static const char *lt_script_lttween = 
"-- lttween.lua\n"
"function lt.Tween(node, tween_info)\n"
"    local fields = {}\n"
"    local time = 0\n"
"    local delay = 0\n"
"    local easing = nil\n"
"    local action = nil\n"
"    local reverse = false\n"
"    for field, value in pairs(tween_info) do\n"
"        if field == \"time\" then\n"
"            time = value\n"
"        elseif field == \"easing\" then\n"
"            easing = value\n"
"        elseif field == \"action\" then\n"
"            action = value\n"
"        elseif field == \"delay\" then\n"
"            delay = value\n"
"        --elseif field == \"reverse\" then\n"
"        --    reverse = value\n"
"        else\n"
"            fields[field] = value\n"
"        end\n"
"    end\n"
"    for field, value in pairs(fields) do\n"
"        --if reverse then\n"
"        --    local tmp = node[field]\n"
"        --    node[field] = value\n"
"        --    value = tmp\n"
"        --end\n"
"        lt.AddTween(node, field, value, time, delay, easing, action)\n"
"        action = nil -- only attach action to one field\n"
"    end\n"
"    return node\n"
"end\n"
"\n"
"function lt.CancelTween(obj, field)\n"
"    error(\"NYI\")\n"
"end\n"
"\n"
"function lt.RemoveTweens(obj)\n"
"    error(\"NYI\")\n"
"end\n"
"\n"
"-------------------------------------------------------------\n"
"\n"
"function lt.LinearEase(t)\n"
"    return t\n"
"end\n"
"\n"
"function lt.EaseIn(t)\n"
"    return math.pow(t, 3)\n"
"end\n"
"\n"
"function lt.EaseOut(t)\n"
"    return math.pow(t - 1, 3) + 1\n"
"end\n"
"\n"
"function lt.EaseInOut(t)\n"
"    t = t * 2\n"
"    if t < 1 then\n"
"        return math.pow(t, 3) / 2\n"
"    end\n"
"    t = t - 2\n"
"    return (math.pow(t, 3) + 2) / 2\n"
"end\n"
"\n"
"function lt.BackInEase(t)\n"
"    local s = 1.70158\n"
"    return t * t * ((s + 1) * t - s)\n"
"end\n"
"\n"
"function lt.BackOutEase(t)\n"
"    t = t - 1\n"
"    local s = 1.70158\n"
"    return t * t * ((s + 1) * t + s) + 1\n"
"end\n"
"\n"
"function lt.ElasticEase(t)\n"
"    if t == 0 or t == 1 then\n"
"        return t\n"
"    end\n"
"    local p = 0.3\n"
"    local s = p / 4\n"
"    return math.pow(2, -10 * t) * math.sin((t - s) * (2 * math.pi) / p) + 1\n"
"end\n"
"\n"
"function lt.BounceEase(t)\n"
"    local s = 7.5625\n"
"    local p = 2.75\n"
"    local l\n"
"    if t < 1 / p then\n"
"        l = s * t * t\n"
"    else\n"
"        if t < 2 / p then\n"
"            t = t - 1.5 / p\n"
"            l = s * t * t + 0.75\n"
"        else\n"
"            if t < 2.5 / p then\n"
"                t = t - 2.25 / p\n"
"                l = s * t * t + 0.9375\n"
"            else\n"
"                t = t - 2.625 / p\n"
"                l = s * t * t + 0.984375\n"
"            end\n"
"        end\n"
"    end\n"
"    return l\n"
"end\n"
"\n"
"function lt.CubicBezierEase(p1x, p1y, p2x, p2y)\n"
"    return function(t)\n"
"        local cx = 3 * p1x\n"
"        local bx = 3 * (p2x - p1x) - cx\n"
"        local ax = 1 - cx - bx\n"
"        local cy = 3 * p1y\n"
"        local by = 3 * (p2y - p1y) - cy\n"
"        local ay = 1 - cy - by\n"
"        local function sampleCurveX(t)\n"
"            return ((ax * t + bx) * t + cx) * t\n"
"        end\n"
"        local function solveCurveX(x, epsilon)\n"
"            local t0, t1, t2, x2, d2, i\n"
"            t2 = x\n"
"            for i = 0, 7 do\n"
"                x2 = sampleCurveX(t2) - x\n"
"                if math.abs(x2) < epsilon then\n"
"                    return t2\n"
"                end\n"
"                d2 = (3 * ax * t2 + 2 * bx) * t2 + cx\n"
"                if math.abs(d2) < 1e-6 then\n"
"                    break\n"
"                end\n"
"                t2 = t2 - x2 / d2\n"
"            end\n"
"            t0 = 0\n"
"            t1 = 1\n"
"            t2 = x\n"
"            if t2 < t0 then\n"
"                return t0\n"
"            end\n"
"            if t2 > t1 then\n"
"                return t1\n"
"            end\n"
"            while t0 < t1 do\n"
"                x2 = sampleCurveX(t2)\n"
"                if math.abs(x2 - x) < epsilon then\n"
"                    return t2\n"
"                end\n"
"                if x > x2 then\n"
"                    t0 = t2\n"
"                else\n"
"                    t1 = t2\n"
"                end\n"
"                t2 = (t1 - t0) / 2 + t0\n"
"            end\n"
"            return t2\n"
"        end\n"
"        local t2 = solveCurveX(t, 0.001)\n"
"        return ((ay * t2 + by) * t2 + cy) * t2\n"
"    end\n"
"end\n"
"\n"
"function lt.AccelEase(t)\n"
"    return t * t\n"
"end\n"
"\n"
"function lt.DeccelEase(t)\n"
"    local t1 = 1 - t\n"
"    return 1 - (t1 * t1)\n"
"end\n"
"\n"
"function lt.ZoomInEase(t)\n"
"    local s = 0.05\n"
"    return (1 / (1 + s - t) - 1) * s\n"
"end\n"
"\n"
"function lt.ZoomOutEase(t)\n"
"    local s = 0.05\n"
"    return 1 + s - s / (s + t)\n"
"end\n"
"\n"
"function lt.RevolveEase(t)\n"
"    return (math.sin(math.pi * (t - 0.5)) + 1) * 0.5\n"
"end\n"
"\n"
"ease_func_table = {\n"
"    bounce = lt.BounceEase,\n"
"    elastic = lt.ElasticEase,\n"
"    backin = lt.BackInEase,\n"
"    backout = lt.BackOutEase,\n"
"    [\"in\"] = lt.EaseIn,\n"
"    out = lt.EaseOut,\n"
"    linear = lt.LinearEase,\n"
"    accel = lt.AccelEase,\n"
"    decel = lt.DeccelEase,\n"
"    zoomin = lt.ZoomInEase,\n"
"    zoomout = lt.ZoomOutEase,\n"
"    revolve = lt.RevolveEase,\n"
"}\n"
;

static const char *lt_script_ltui = 
"-- ltui.lua\n"
"local current_button_input\n"
"-- node:Button(bbox, onDown, onUp) or\n"
"-- node:Button(onDown, onUp) (node itself is the bbox)\n"
"-- node:Button(onUp) (node itself is the bbox)\n"
"function lt.Button(node, ...)\n"
"    local bbox, onDown, onUp\n"
"    local nargs = select(\"#\", ...)\n"
"    if nargs == 3 then\n"
"        bbox, onDown, onUp = ...\n"
"    elseif nargs == 2 then\n"
"        bbox = node\n"
"        onDown, onUp = ...\n"
"    elseif nargs == 1 then\n"
"        bbox = node\n"
"        onUp = ...\n"
"    else\n"
"        error(\"wrong number of argument\")\n"
"    end\n"
"    local left = bbox.left\n"
"    local bottom = bbox.bottom\n"
"    local right = bbox.right\n"
"    local top = bbox.top\n"
"    local button = node:DownFilter(left, bottom, right, top)\n"
"    button:OnPointerDown(function(down_input, down_x, down_y)\n"
"        if current_button_input then -- already a button being pressed\n"
"            return false\n"
"        end\n"
"        current_button_input = down_input\n"
"        button.input_id = down_input\n"
"        if onDown then\n"
"            onDown()\n"
"        end\n"
"        return true\n"
"    end)\n"
"    button:OnPointerUp(function(up_input, up_x, up_y)\n"
"        if current_button_input == up_input and button.input_id == up_input then\n"
"            if onUp then\n"
"                onUp()\n"
"            end\n"
"            current_button_input = nil\n"
"            button.input_id = nil\n"
"            return true\n"
"        end\n"
"        return false\n"
"    end)\n"
"    return button\n"
"end\n"
"\n"
"function lt.HitBarrier(child)\n"
"    return lt.HitFilter(child, 1, 1, -1, -1)\n"
"end\n"
"\n"
"function lt.CancelButton(input_id)\n"
"    if current_button_input == input_id then\n"
"        current_button_input = nil\n"
"    end\n"
"end\n"
;

static const char *lt_script_ltutil = 
"-- ltutil.lua\n"
"function table.clone(t)\n"
"    local copy = {}\n"
"    for k, v in pairs(t) do\n"
"        copy[k] = v\n"
"    end\n"
"    return copy\n"
"end\n"
"\n"
"function table.search(t, elem)\n"
"    for i = 1, #t do\n"
"        if t[i] == elem then\n"
"            return i\n"
"        end\n"
"    end\n"
"    return nil\n"
"end\n"
"\n"
"function table.append(arr1, arr2)\n"
"    local i = #arr1 + 1\n"
"    for _, v in ipairs(arr2) do\n"
"        arr1[i] = v\n"
"        i = i + 1\n"
"    end\n"
"end\n"
"\n"
"local\n"
"function table_tostring(t, indent)\n"
"    local tp = type(t)\n"
"    if tp == \"table\" then\n"
"        indent = indent or 0\n"
"        local tab = \"    \"\n"
"        local prefix = string.rep(tab, indent)\n"
"        local str = \"{\\n\"\n"
"        for key, value in pairs(t) do\n"
"            local keystr\n"
"            if type(key) == \"string\" then\n"
"                keystr = key\n"
"            else\n"
"                keystr = \"[\" .. tostring(key) .. \"]\"\n"
"            end\n"
"            str = str .. prefix .. tab .. keystr .. \" = \" .. table_tostring(value, indent + 1) .. \",\\n\"\n"
"        end\n"
"        str = str .. prefix .. \"}\"\n"
"        return str\n"
"    elseif tp == \"string\" then\n"
"        return '\"' .. t:gsub(\"\\\"\", \"\\\\\\\"\") .. '\"'\n"
"    else\n"
"        return tostring(t)\n"
"    end\n"
"end\n"
"\n"
"table.tostring = table_tostring\n"
"\n"
"function lt.ClearFuncs()\n"
"    lt.Advance = nil\n"
"    lt.Render = nil\n"
"    lt.PointerDown = nil\n"
"    lt.PointerUp = nil\n"
"    lt.PointerMove = nil\n"
"    lt.KeyUp = nil\n"
"    lt.KeyDown = nil\n"
"end\n"
"\n"
"function lt.AddSpriteFiles(tab, name, num_frames)\n"
"    for i = 1, num_frames do\n"
"        table.insert(tab, string.format(\"%s_%04d\", name, i))\n"
"    end\n"
"    return tab\n"
"end\n"
"\n"
"function lt.MatchFields(tab, pattern)\n"
"    local fields = {}\n"
"    local values = {}\n"
"    for field, value in pairs(tab) do\n"
"        if type(field) == \"string\" then\n"
"            if string.match(field, pattern) then\n"
"                table.insert(fields, field)\n"
"            end\n"
"        end\n"
"    end\n"
"    table.sort(fields)\n"
"    for i, field in ipairs(fields) do\n"
"        values[i] = tab[field]\n"
"    end\n"
"    return values\n"
"end\n"
"\n"
"function lt.Store(key, val)\n"
"    local t = type(val)\n"
"    if t == \"string\" or t == \"number\" or t == \"boolean\" or t == \"nil\" then\n"
"        local state = lt.state\n"
"        state[key] = val\n"
"    else\n"
"        log(\"tried to store a value of type \" .. t .. \" for key \" .. key)\n"
"    end\n"
"end\n"
"\n"
"function lt.Retrieve(key)\n"
"    local state = lt.state\n"
"    if state then\n"
"        return state[key]\n"
"    else\n"
"        return nil\n"
"    end\n"
"end\n"
"\n"
"function lt.LogGlobals()\n"
"    log(\"Globals:\")\n"
"    for key, _ in pairs(_G) do\n"
"        log(key)\n"
"    end\n"
"end\n"
"\n"
"-- Prevents creation of any new globals.\n"
"function lt.FixGlobals()\n"
"    local mt = {\n"
"        __newindex = function(table, key, value)\n"
"            if rawget(table, key) ~= nil then\n"
"                rawset(table, key, value)\n"
"            else\n"
"                error(\"Attempt to create new global: \" .. key, 2)\n"
"            end\n"
"        end\n"
"    }\n"
"    setmetatable(_G, mt)\n"
"end\n"
"\n"
"function lt.SceneNodeContainsPoint(node, x, y, buf)\n"
"    buf = buf or 0\n"
"    local t, b, l, r = node.top, node.bottom, node.left, node.right\n"
"    return x <= r + buf and x >= l - buf and y <= t + buf and y >= b - buf\n"
"end\n"
"\n"
"\n"
"lt.config = {\n"
"    design_width = 960,\n"
"    design_height = 640,\n"
"    start_script = \"main\",\n"
"    world_top = 1,\n"
"    world_bottom = -1,\n"
"    world_left = -1.5,\n"
"    world_right = 1.5,\n"
"    vsync = true,\n"
"    fixed_update_time = 1/60,\n"
"    show_mouse_cursor = true,\n"
"    fullscreen = false,\n"
"    letterbox = false,\n"
"}\n"
"\n"
"function lt._Setup() \n"
"    lt.config.world_width = lt.config.world_right - lt.config.world_left\n"
"    lt.config.world_height = lt.config.world_top - lt.config.world_bottom\n"
"    if not lt.config.short_name then\n"
"        error(\"lt.config.short_name not set.  Please set it in config.lua.\")\n"
"    end\n"
"    lt.SetAppShortName(lt.config.short_name)\n"
"    lt.SetDesignScreenSize(lt.config.design_width, lt.config.design_height)\n"
"    lt.config.orientation = lt.config.design_width > lt.config.design_height and \"landscape\" or \"portrait\"\n"
"    lt.SetOrientation(lt.config.orientation)\n"
"\n"
"    lt.SetFullScreen(lt.config.fullscreen)\n"
"    lt.SetLetterBox(lt.config.letterbox)\n"
"    lt.SetShowMouseCursor(lt.config.show_mouse_cursor)\n"
"    lt.SetViewPort(lt.config.world_left, lt.config.world_bottom, lt.config.world_right, lt.config.world_top)\n"
"    lt.SetStartScript(lt.config.start_script)\n"
"\n"
"    if lt.config.letterbox ~= nil then\n"
"        lt.SetLetterBox(lt.config.letterbox);\n"
"    end\n"
"    lt.SetRefreshParams(lt.config.vsync, lt.config.fixed_update_time);\n"
"end\n"
;

